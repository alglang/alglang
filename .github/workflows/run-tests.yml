name: Run tests

on:
  push:
    branches: [ dev ]
  pull_request:
    branches: [ master ]

jobs:
  php-tests:
    runs-on: ubuntu-latest
    name: PHP v7.4
    services:
      mariadb:
        image: mariadb:10.1
        ports:
          - 3306
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          MYSQL_DATABASE: test
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=10s --health-retries=10

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Verify MariaDB connection
        env:
          PORT: ${{ job.services.mariadb.ports[3306] }}
        run: |
          while ! mysqladmin ping -h"127.0.0.1" -P"$PORT" --silent; do
            sleep 1
          done

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 7.4
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite
          coverage: xdebug

      - name: Copy .env
        run: php -r "file_exists('.env') || copy('.env.ci', '.env');"

      - name: Get composer cache directory path
        id: composer-cache-path
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Cache composer packages
        uses: actions/cache@v2
        env:
          cache-name: cache-composer-packages
        with:
          path: ${{ steps.composer-cache-path.outputs.dir }}
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Install dependencies
        run: composer install --no-ansi --no-interaction --no-scripts --no-suggest --no-progress --prefer-dist

      - name: Generate key
        run: php artisan key:generate

      - name: Directory Permissions
        run: chmod -R 777 storage bootstrap/cache

      - name: Execute tests
        run: vendor/bin/phpunit --coverage-clover=coverage.xml
        env:
          DB_PORT: ${{ job.services.mariadb.ports[3306] }}

      - name: Run static analysis with PHPStan
        run: vendor/bin/phpstan analyze

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
          fail_ci_if_error: false

  js-tests:
    runs-on: ubuntu-latest
    name: Node v14.x

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: 14.x

      - name: Get yarn cache directory path
        id: yarn-cache-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache yarn modules
        uses: actions/cache@v2
        env:
          cache-name: cache-yarn-modules
        with:
          path: ${{ steps.yarn-cache-path.outputs.dir }}
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run linter
        run: yarn lint

      - name: Build production version of app
        run: yarn prod

      - name: Run tests
        run: yarn test

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: './coverage/cobertura-coverage.xml'
          fail_ci_if_error: false
